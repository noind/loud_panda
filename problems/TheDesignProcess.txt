1. Express how you wish to represent information as data

; We use numbers to represent centimeters

2. Write down a signature, a statement of purpose, and a function header.

; String -> Number
; Temp -> String
; Number String Image -> Image

Purpose statement - what does the function compute?

; Number String Image -> Image 
; adds s to img,
; y pixels from the top and 10 from the left 
(define (add-image y s img)
  (empty-scene 100 100))

3. Examples

; Number -> Number
; computes the area of a square with side len 
; given: 2, expect: 4
; given: 7, expect: 49
(define (area-of-square len) 0)

4. Inventory

5. Code

; Number -> Number
; computes the area of a square with side len 
; given: 2, expect: 4
; given: 7, expect: 49
(define (area-of-square len)
  (sqr len))

; Number String Image -> Image
; adds s to img, y pixels from top, 10 pixels to the left
; given: 
;    5 for y, 
;    "hello" for s, and
;    (empty-scene 100 100) for img
; expected: 
;    (place-image (text "hello" 10 "red") 10 5 ...)
;    where ... is (empty-scene 100 100)
(define (add-image y s img)
  (place-image (text s 10 "red") 10 y img))

6. Test
